generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  nickname     String?
  email        String?  @unique
  authProvider String // 'guest' | 'google' | 'apple'
  isGuest      Boolean  @default(false)
  avatarUrl    String?
  level        Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  password     String?

  wallet                 Wallet?
  holdings               Holding[]
  userTransactions       UserTransaction[]
  refreshTokens          RefreshToken[]
  sentFriendRequests     FriendRequest[]   @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  userFriends            Friend[]          @relation("UserFriends")
  friendUsers            Friend[]          @relation("FriendUsers")
  chatRoomMembers        ChatRoomMember[]
}

model Stock {
  id         Int      @id @default(autoincrement())
  symbol     String   @unique
  name       String
  price      Float
  prevPrice  Float?
  changeRate Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  histories        StockHistory[]
  holdings         Holding[]
  userTransactions UserTransaction[]
}

model StockHistory {
  id        Int      @id @default(autoincrement())
  stockId   Int
  price     Float
  timestamp DateTime @default(now())

  stock Stock @relation(fields: [stockId], references: [id])
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  updatedAt DateTime @updatedAt
  balance   Float    @default(10000)

  user User @relation(fields: [userId], references: [id])
}

model Holding {
  id          Int   @id @default(autoincrement())
  userId      Int
  stockId     Int
  quantity    Int
  avgBuyPrice Float @default(0) // ✅ 추가: 평균 매수 가격
  user        User  @relation(fields: [userId], references: [id])
  stock       Stock @relation(fields: [stockId], references: [id])

  @@unique([userId, stockId])
}

model UserTransaction {
  id        Int             @id @default(autoincrement())
  userId    Int
  stockId   Int
  quantity  Int
  price     Float
  total     Float
  type      TransactionType
  createdAt DateTime        @default(now())

  user  User  @relation(fields: [userId], references: [id])
  stock Stock @relation(fields: [stockId], references: [id])
}

enum TransactionType {
  BUY
  SELL
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   Int
  receiverId Int
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())

  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
}

model Friend {
  id        String   @id @default(uuid())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("FriendUsers", fields: [friendId], references: [id])
}

model ChatRoom {
  id        String   @id @default(uuid())
  name      String?
  createdAt DateTime @default(now())

  messages ChatMessage[]
  members  ChatRoomMember[]
}

model ChatMessage {
  id        String   @id @default(uuid())
  roomId    String
  senderId  String
  text      String
  createdAt DateTime @default(now())

  room ChatRoom @relation(fields: [roomId], references: [id])
}

model ChatRoomMember {
  id     String @id @default(uuid())
  roomId String
  userId String

  room ChatRoom @relation(fields: [roomId], references: [id])
  user User     @relation(fields: [userId], references: [uuid])

  @@unique([roomId, userId])
}
